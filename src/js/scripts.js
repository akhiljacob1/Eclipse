import * as THREE from 'three'
import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls.js'
import Globe from 'globe.gl';

function parseDMS(input) {
  var parts = input.split(/[^\d\w]+/);
  var lat = convertDMSToDD(parts[0], parts[1], parts[2], parts[3]);
  var lng = convertDMSToDD(parts[4], parts[5], parts[6], parts[7]);
  // Order must be like this: [longitude and latitude]
  // Since only GeoJson Geometry is supported (mentioned in GitHub), we must follow its rules
  // https://datatracker.ietf.org/doc/html/rfc7946#section-3.1.1
  return [lng, lat]
}

function convertDMSToDD(degrees, minutes, seconds, direction) {
  degrees = parseFloat(degrees);
  minutes = parseFloat(minutes);
  seconds = parseFloat(seconds);

  var dd = degrees + minutes/60 + seconds/(60*60);

  if (direction == "S" || direction == "W") {
    dd = dd * -1;
  } // Don't do anything for N or E
  return dd
}

function parseCoordinates(rawData) {
  return rawData.map(parseDMS);
}

const centerData = [
  "07°49.3'S 158°31.9'W",
  "07°37.8'S 157°10.3'W",
  "05°49.9'S 148°07.7'W",
  "04°43.7'S 144°12.9'W",
  "03°46.1'S 141°20.3'W",
  "02°53.1'S 138°59.7'W",
  "02°03.1'S 136°59.7'W",
  "01°15.1'S 135°14.2'W",
  "00°28.9'S 133°39.6'W",
  "00°16.1'N 132°13.5'W",
  "01°00.0'N 130°54.5'W",
  "01°42.9'N 129°41.2'W",
  "02°25.1'N 128°32.8'W",
  "03°06.5'N 127°28.6'W",
  "03°47.4'N 126°28.1'W",
  "04°27.7'N 125°30.7'W",
  "05°07.5'N 124°36.1'W",
  "05°46.9'N 123°44.0'W",
  "06°25.9'N 122°54.1'W",
  "07°04.5'N 122°06.2'W",
  "07°42.8'N 121°20.1'W",
  "08°20.7'N 120°35.7'W",
  "08°58.4'N 119°52.7'W",
  "09°35.8'N 119°11.0'W",
  "10°13.0'N 118°30.5'W",
  "10°49.9'N 117°51.1'W",
  "11°26.6'N 117°12.7'W",
  "12°03.2'N 116°35.2'W",
  "12°39.5'N 115°58.5'W",
  "13°15.7'N 115°22.5'W",
  "13°51.7'N 114°47.2'W",
  "14°27.5'N 114°12.5'W",
  "15°03.2'N 113°38.4'W",
  "15°38.8'N 113°04.7'W",
  "16°14.2'N 112°31.4'W",
  "16°49.5'N 111°58.5'W",
  "17°24.8'N 111°25.9'W",
  "17°59.9'N 110°53.5'W",
  "18°34.9'N 110°21.4'W",
  "19°09.8'N 109°49.5'W",
  "19°44.6'N 109°17.6'W",
  "20°19.4'N 108°45.9'W",
  "20°54.1'N 108°14.2'W",
  "21°28.7'N 107°42.5'W",
  "22°03.2'N 107°10.7'W",
  "22°37.7'N 106°38.9'W",
  "23°12.1'N 106°06.9'W",
  "23°46.5'N 105°34.7'W",
  "24°20.8'N 105°02.4'W",
  "24°55.1'N 104°29.8'W",
  "25°29.3'N 103°56.9'W",
  "26°03.5'N 103°23.6'W",
  "26°37.6'N 102°50.0'W",
  "27°11.7'N 102°15.9'W",
  "27°45.8'N 101°41.4'W",
  "28°19.8'N 101°06.3'W",
  "28°53.8'N 100°30.7'W",
  "29°27.8'N 099°54.5'W",
  "30°01.8'N 099°17.6'W",
  "30°35.7'N 098°39.9'W",
  "31°09.6'N 098°01.5'W",
  "31°43.4'N 097°22.2'W",
  "32°17.2'N 096°42.0'W",
  "32°51.0'N 096°00.8'W",
  "33°24.8'N 095°18.6'W",
  "33°58.5'N 094°35.2'W",
  "34°32.2'N 093°50.7'W",
  "35°05.9'N 093°04.8'W",
  "35°39.5'N 092°17.6'W",
  "36°13.0'N 091°28.9'W",
  "36°46.5'N 090°38.6'W",
  "37°20.0'N 089°46.6'W",
  "37°53.3'N 088°52.7'W",
  "38°26.6'N 087°56.9'W",
  "38°59.8'N 086°59.0'W",
  "39°32.9'N 085°58.9'W",
  "40°05.8'N 084°56.3'W",
  "40°38.6'N 083°51.0'W",
  "41°11.3'N 082°43.0'W",
  "41°43.8'N 081°31.8'W",
  "42°16.0'N 080°17.3'W",
  "42°48.0'N 078°59.1'W",
  "43°19.8'N 077°36.9'W",
  "43°51.2'N 076°10.3'W",
  "44°22.2'N 074°39.0'W",
  "44°52.7'N 073°02.2'W",
  "45°22.7'N 071°19.5'W",
  "45°52.1'N 069°30.1'W",
  "46°20.7'N 067°33.1'W",
  "46°48.5'N 065°27.5'W",
  "47°15.1'N 063°11.8'W",
  "47°40.4'N 060°44.3'W",
  "48°04.0'N 058°02.6'W",
  "48°25.4'N 055°03.5'W",
  "48°44.0'N 051°41.8'W",
  "48°58.5'N 047°49.7'W",
  "49°06.8'N 043°12.3'W",
  "49°04.1'N 037°14.6'W",
  "48°28.2'N 027°16.4'W",
  "47°37.2'N 019°47.1'W"
]

const southData = [
  "08°27.0'S 158°20.2'W",
  "07°35.9'S 152°54.3'W",
  "06°11.4'S 146°37.9'W",
  "05°08.2'S 143°00.6'W",
  "04°12.0'S 140°15.6'W",
  "03°20.0'S 137°59.5'W",
  "02°30.6'S 136°02.5'W",
  "01°43.2'S 134°19.0'W",
  "00°57.4'S 132°46.0'W",
  "00°12.8'S 131°21.1'W",
  "00°30.8'N 130°03.0'W",
  "01°13.5'N 128°50.6'W",
  "01°55.4'N 127°42.8'W",
  "02°36.6'N 126°39.1'W",
  "03°17.3'N 125°39.0'W",
  "03°57.4'N 124°42.0'W",
  "04°37.0'N 123°47.8'W",
  "05°16.2'N 122°56.0'W",
  "05°55.1'N 122°06.4'W",
  "06°33.5'N 121°18.7'W",
  "07°11.6'N 120°32.9'W",
  "07°49.5'N 119°48.6'W",
  "08°27.0'N 119°05.7'W",
  "09°04.3'N 118°24.2'W",
  "09°41.3'N 117°43.9'W",
  "10°18.1'N 117°04.6'W",
  "10°54.7'N 116°26.4'W",
  "11°31.0'N 115°49.0'W",
  "12°07.2'N 115°12.4'W",
  "12°43.2'N 114°36.6'W",
  "13°19.1'N 114°01.4'W",
  "13°54.8'N 113°26.9'W",
  "14°30.3'N 112°52.8'W",
  "15°05.7'N 112°19.2'W",
  "15°41.0'N 111°46.1'W",
  "16°16.1'N 111°13.3'W",
  "16°51.2'N 110°40.8'W",
  "17°26.1'N 110°08.6'W",
  "18°00.9'N 109°36.6'W",
  "18°35.7'N 109°04.8'W",
  "19°10.3'N 108°33.1'W",
  "19°44.8'N 108°01.5'W",
  "20°19.3'N 107°30.0'W",
  "20°53.7'N 106°58.4'W",
  "21°28.0'N 106°26.8'W",
  "22°02.2'N 105°55.2'W",
  "22°36.4'N 105°23.4'W",
  "23°10.5'N 104°51.4'W",
  "23°44.6'N 104°19.3'W",
  "24°18.6'N 103°46.9'W",
  "24°52.6'N 103°14.2'W",
  "25°26.5'N 102°41.2'W",
  "26°00.3'N 102°07.8'W",
  "26°34.2'N 101°34.1'W",
  "27°07.9'N 100°59.8'W",
  "27°41.7'N 100°25.1'W",
  "28°15.4'N 099°49.8'W",
  "28°49.0'N 099°13.9'W",
  "29°22.7'N 098°37.4'W",
  "29°56.3'N 098°00.2'W",
  "30°29.8'N 097°22.1'W",
  "31°03.3'N 096°43.3'W",
  "31°36.8'N 096°03.6'W",
  "32°10.3'N 095°23.0'W",
  "32°43.7'N 094°41.3'W",
  "33°17.0'N 093°58.5'W",
  "33°50.4'N 093°14.6'W",
  "34°23.6'N 092°29.4'W",
  "34°56.9'N 091°42.9'W",
  "35°30.1'N 090°55.0'W",
  "36°03.2'N 090°05.5'W",
  "36°36.2'N 089°14.4'W",
  "37°09.2'N 088°21.6'W",
  "37°42.1'N 087°26.8'W",
  "38°14.9'N 086°30.0'W",
  "38°47.6'N 085°31.1'W",
  "39°20.2'N 084°29.8'W",
  "39°52.7'N 083°25.9'W",
  "40°24.9'N 082°19.3'W",
  "40°57.1'N 081°09.8'W",
  "41°29.0'N 079°57.0'W",
  "42°00.7'N 078°40.7'W",
  "42°32.1'N 077°20.6'W",
  "43°03.2'N 075°56.3'W",
  "43°33.9'N 074°27.4'W",
  "44°04.2'N 072°53.3'W",
  "44°34.1'N 071°13.6'W",
  "45°03.3'N 069°27.5'W",
  "45°31.8'N 067°34.1'W",
  "45°59.6'N 065°32.6'W",
  "46°26.3'N 063°21.5'W",
  "46°51.8'N 060°59.2'W",
  "47°15.7'N 058°23.6'W",
  "47°37.7'N 055°31.7'W",
  "47°57.1'N 052°18.9'W",
  "48°12.9'N 048°38.2'W",
  "48°23.5'N 044°16.9'W",
  "48°24.9'N 038°47.4'W",
  "48°03.8'N 030°30.5'W",
  "47°00.6'N 020°04.5'W",
]

const northData = [
  "07°11.4'S 158°43.9'W",
  "05°30.4'S 149°47.5'W",
  "04°20.3'S 145°29.5'W",
  "03°21.0'S 142°27.6'W",
  "02°26.9'S 140°01.8'W",
  "01°36.0'S 137°58.5'W",
  "00°47.5'S 136°10.6'W",
  "00°00.8'S 134°34.3'W",
  "00°44.6'N 133°06.9'W",
  "01°28.8'N 131°46.8'W",
  "02°12.1'N 130°32.7'W",
  "02°54.5'N 129°23.6'W",
  "03°36.2'N 128°18.8'W",
  "04°17.2'N 127°17.8'W",
  "04°57.8'N 126°19.9'W",
  "05°37.8'N 125°25.0'W",
  "06°17.3'N 124°32.6'W",
  "06°56.5'N 123°42.4'W",
  "07°35.2'N 122°54.3'W",
  "08°13.7'N 122°07.9'W",
  "08°51.8'N 121°23.2'W",
  "09°29.6'N 120°40.0'W",
  "10°07.2'N 119°58.2'W",
  "10°44.5'N 119°17.5'W",
  "11°21.6'N 118°38.0'W",
  "11°58.5'N 117°59.4'W",
  "12°35.2'N 117°21.8'W",
  "13°11.7'N 116°44.9'W",
  "13°48.0'N 116°08.8'W",
  "14°24.2'N 115°33.4'W",
  "15°00.2'N 114°58.6'W",
  "15°36.0'N 114°24.3'W",
  "16°11.8'N 113°50.5'W",
  "16°47.4'N 113°17.1'W",
  "17°22.9'N 112°44.0'W",
  "17°58.3'N 112°11.3'W",
  "18°33.6'N 111°38.8'W",
  "19°08.8'N 111°06.6'W",
  "19°44.0'N 110°34.5'W",
  "20°19.0'N 110°02.5'W",
  "20°54.0'N 109°30.6'W",
  "21°28.9'N 108°58.7'W",
  "22°03.7'N 108°26.8'W",
  "22°38.5'N 107°54.9'W",
  "23°13.2'N 107°22.9'W",
  "23°47.9'N 106°50.7'W",
  "24°22.5'N 106°18.4'W",
  "24°57.1'N 105°45.8'W",
  "25°31.6'N 105°12.9'W",
  "26°06.1'N 104°39.8'W",
  "26°40.6'N 104°06.3'W",
  "27°15.0'N 103°32.4'W",
  "27°49.4'N 102°58.1'W",
  "28°23.8'N 102°23.2'W",
  "28°58.1'N 101°47.9'W",
  "29°32.5'N 101°11.9'W",
  "30°06.8'N 100°35.3'W",
  "30°41.0'N 099°58.0'W",
  "31°15.3'N 099°19.9'W",
  "31°49.5'N 098°41.0'W",
  "32°23.7'N 098°01.3'W",
  "32°57.9'N 097°20.6'W",
  "33°32.0'N 096°38.9'W",
  "34°06.2'N 095°56.0'W",
  "34°40.3'N 095°12.1'W",
  "35°14.3'N 094°26.9'W",
  "35°48.4'N 093°40.3'W",
  "36°22.4'N 092°52.3'W",
  "36°56.3'N 092°02.8'W",
  "37°30.2'N 091°11.6'W",
  "38°04.0'N 090°18.7'W",
  "38°37.8'N 089°23.8'W",
  "39°11.4'N 088°26.9'W",
  "39°45.0'N 087°27.9'W",
  "40°18.5'N 086°26.5'W",
  "40°51.8'N 085°22.5'W",
  "41°25.0'N 084°15.8'W",
  "41°58.1'N 083°06.2'W",
  "42°30.9'N 081°53.3'W",
  "43°03.5'N 080°36.9'W",
  "43°35.9'N 079°16.7'W",
  "44°07.9'N 077°52.4'W",
  "44°39.6'N 076°23.4'W",
  "45°10.8'N 074°49.4'W",
  "45°41.6'N 073°09.8'W",
  "46°11.8'N 071°23.9'W",
  "46°41.4'N 069°31.0'W",
  "47°10.1'N 067°30.2'W",
  "47°37.8'N 065°20.1'W",
  "48°04.3'N 062°59.5'W",
  "48°29.3'N 060°26.4'W",
  "48°52.5'N 057°38.1'W",
  "49°13.3'N 054°31.1'W",
  "49°30.8'N 050°59.7'W",
  "49°43.8'N 046°54.8'W",
  "49°49.5'N 041°58.6'W",
  "49°41.5'N 035°25.7'W",
  "48°13.9'N 019°29.2'W",
]

// Creating totality polygon
const nPoints = parseCoordinates(northData)
const sPoints = parseCoordinates(southData.reverse())
const polygonCoordinates = nPoints.concat(sPoints)
polygonCoordinates.push(nPoints[0])

const countriesData = {
  "features": [
    {
      "properties": {
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [
          polygonCoordinates
        ]
      }
    }
  ]
};

const greatestEclipse = parseDMS("25°17.4'N 104°08.3'W")

const world = Globe()
  (document.getElementById('globeViz'))
  .width(window.innerWidth * 0.9)
  .globeImageUrl('//unpkg.com/three-globe/example/img/earth-blue-marble.jpg')
  .bumpImageUrl('//unpkg.com/three-globe/example/img/earth-topology.png')
  .backgroundImageUrl('//unpkg.com/three-globe/example/img/night-sky.png')
  .polygonsData(countriesData.features)
  .polygonCapColor(feat => 'rgba(200, 0, 0, 0.6)')
  .polygonSideColor(() => 'rgba(0, 100, 0, 0.05)')
  .polygonAltitude(0.005)
  .polygonLabel(['Path of Totality'])
  .pointOfView({
    lat: greatestEclipse[1],
    lng: greatestEclipse[0],
  })
